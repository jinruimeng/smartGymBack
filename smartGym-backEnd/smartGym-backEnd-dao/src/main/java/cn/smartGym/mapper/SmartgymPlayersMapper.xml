<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.smartGym.mapper.SmartgymPlayersMapper">
  <resultMap id="BaseResultMap" type="cn.smartGym.pojo.SmartgymPlayers">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="college" jdbcType="INTEGER" property="college" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="item_id" jdbcType="BIGINT" property="itemId" />
    <result column="job" jdbcType="INTEGER" property="job" />
    <result column="playerno" jdbcType="VARCHAR" property="playerno" />
    <result column="group" jdbcType="INTEGER" property="group" />
    <result column="path" jdbcType="INTEGER" property="path" />
    <result column="grades" jdbcType="VARCHAR" property="grades" />
    <result column="rank" jdbcType="INTEGER" property="rank" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="created" jdbcType="TIMESTAMP" property="created" />
    <result column="updated" jdbcType="TIMESTAMP" property="updated" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, name, college, user_id, item_id, job, playerno, group, path, grades, rank, status, 
    created, updated
  </sql>
  <select id="selectByExample" parameterType="cn.smartGym.pojo.SmartgymPlayersExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from smartgym_players
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from smartgym_players
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from smartgym_players
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="cn.smartGym.pojo.SmartgymPlayersExample">
    delete from smartgym_players
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.smartGym.pojo.SmartgymPlayers">
    insert into smartgym_players (id, name, college, 
      user_id, item_id, job, 
      playerno, group, path, 
      grades, rank, status, 
      created, updated)
    values (#{id,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{college,jdbcType=INTEGER}, 
      #{userId,jdbcType=BIGINT}, #{itemId,jdbcType=BIGINT}, #{job,jdbcType=INTEGER}, 
      #{playerno,jdbcType=VARCHAR}, #{group,jdbcType=INTEGER}, #{path,jdbcType=INTEGER}, 
      #{grades,jdbcType=VARCHAR}, #{rank,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, 
      #{created,jdbcType=TIMESTAMP}, #{updated,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="cn.smartGym.pojo.SmartgymPlayers">
    insert into smartgym_players
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="college != null">
        college,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="itemId != null">
        item_id,
      </if>
      <if test="job != null">
        job,
      </if>
      <if test="playerno != null">
        playerno,
      </if>
      <if test="group != null">
        group,
      </if>
      <if test="path != null">
        path,
      </if>
      <if test="grades != null">
        grades,
      </if>
      <if test="rank != null">
        rank,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="created != null">
        created,
      </if>
      <if test="updated != null">
        updated,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="college != null">
        #{college,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="itemId != null">
        #{itemId,jdbcType=BIGINT},
      </if>
      <if test="job != null">
        #{job,jdbcType=INTEGER},
      </if>
      <if test="playerno != null">
        #{playerno,jdbcType=VARCHAR},
      </if>
      <if test="group != null">
        #{group,jdbcType=INTEGER},
      </if>
      <if test="path != null">
        #{path,jdbcType=INTEGER},
      </if>
      <if test="grades != null">
        #{grades,jdbcType=VARCHAR},
      </if>
      <if test="rank != null">
        #{rank,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="created != null">
        #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="updated != null">
        #{updated,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.smartGym.pojo.SmartgymPlayersExample" resultType="java.lang.Long">
    select count(*) from smartgym_players
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update smartgym_players
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.college != null">
        college = #{record.college,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.itemId != null">
        item_id = #{record.itemId,jdbcType=BIGINT},
      </if>
      <if test="record.job != null">
        job = #{record.job,jdbcType=INTEGER},
      </if>
      <if test="record.playerno != null">
        playerno = #{record.playerno,jdbcType=VARCHAR},
      </if>
      <if test="record.group != null">
        group = #{record.group,jdbcType=INTEGER},
      </if>
      <if test="record.path != null">
        path = #{record.path,jdbcType=INTEGER},
      </if>
      <if test="record.grades != null">
        grades = #{record.grades,jdbcType=VARCHAR},
      </if>
      <if test="record.rank != null">
        rank = #{record.rank,jdbcType=INTEGER},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.created != null">
        created = #{record.created,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updated != null">
        updated = #{record.updated,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update smartgym_players
    set id = #{record.id,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      college = #{record.college,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=BIGINT},
      item_id = #{record.itemId,jdbcType=BIGINT},
      job = #{record.job,jdbcType=INTEGER},
      playerno = #{record.playerno,jdbcType=VARCHAR},
      group = #{record.group,jdbcType=INTEGER},
      path = #{record.path,jdbcType=INTEGER},
      grades = #{record.grades,jdbcType=VARCHAR},
      rank = #{record.rank,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      created = #{record.created,jdbcType=TIMESTAMP},
      updated = #{record.updated,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.smartGym.pojo.SmartgymPlayers">
    update smartgym_players
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="college != null">
        college = #{college,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="itemId != null">
        item_id = #{itemId,jdbcType=BIGINT},
      </if>
      <if test="job != null">
        job = #{job,jdbcType=INTEGER},
      </if>
      <if test="playerno != null">
        playerno = #{playerno,jdbcType=VARCHAR},
      </if>
      <if test="group != null">
        group = #{group,jdbcType=INTEGER},
      </if>
      <if test="path != null">
        path = #{path,jdbcType=INTEGER},
      </if>
      <if test="grades != null">
        grades = #{grades,jdbcType=VARCHAR},
      </if>
      <if test="rank != null">
        rank = #{rank,jdbcType=INTEGER},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="created != null">
        created = #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="updated != null">
        updated = #{updated,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.smartGym.pojo.SmartgymPlayers">
    update smartgym_players
    set name = #{name,jdbcType=VARCHAR},
      college = #{college,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=BIGINT},
      item_id = #{itemId,jdbcType=BIGINT},
      job = #{job,jdbcType=INTEGER},
      playerno = #{playerno,jdbcType=VARCHAR},
      group = #{group,jdbcType=INTEGER},
      path = #{path,jdbcType=INTEGER},
      grades = #{grades,jdbcType=VARCHAR},
      rank = #{rank,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      created = #{created,jdbcType=TIMESTAMP},
      updated = #{updated,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>